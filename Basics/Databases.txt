1. Indexes:-
    - creates an index file on a column keeps in sorted order log(n) time map to the actual entry on disk. 
    - disadvantage :- during writes has to create entry on index file as well.

    types of indexes:- 
        -hash index - works good in memory, bad on disk. needs write ahead log. no range queries
        -b-tree- on disk, supports range query, self balancing binary tree 
        -2d index(r-tree)- geospatial data
        -LSM tree - self balancing tree(AVL, red black)- In memory, no durability. needs write ahead log. 
            creates a SS table on disk for reads. write on tree. read on disk
            LSM trees can be optimised by creating a sparse index on ss tables for reads and also using bloom filters
        -search index - created on top of search data like google web pages records e.g. lucene(lsm tree + SSTables)

2. Replica Set:-
    - Writes only on master node
    - Reads from any master or slave
    - strong consistency is handled by acquiring lock and sends success write only once its completed on both leader as well as from leader to replica.
    - eventual consistency can cause stale reads. Solution is make each user read from the same replica as before. (The data will be in correct order)
    - use write ahead log as centralised to keep track of all operations on each node

3. Multi leader replication
    - Each distributed database in a geographical region has its own leader.

4. Leader less replica Set (not ideal)
    - It has no leaders. All are same just nodes
    - Reads happens on all the nodes simultanously. If 3/5 nodes are successfully written response is returned.
    - During writes every new entry maintains a new version number. If a write fails on a node it tries to update it by seeing if theres an updated version in other nodes.
    - uses quorum to decide 

5. Partitioning
    - Make sure while partitioning that some nodes may not experience heavy load compare to the others. Even though the partition is even but load/queries also have to be even.
    - Key Range partitioning 
        - partitions are based on keys. keys are sorted in partitions to support range queries. partitions are made based on load on each partition.
    - index choice in partitioning
        - local indexes optimises the write speed
        - global indexes optimises the read speed

6. NoSQL follows BASE (Basic Availability, Stateful, Eventual consistency)
    - Key value (DynamoDB, Redis)
        -e.g. DynamoDB, Redis. Can query only on keys. very fast
    - document based
        - e.g. MongoDb .In document based you can query based on value also but you cant query based on value in key value db like dynamoDB
    - column based. For each key it has a list of column and values
    - graph based

7. When to choose which database?
    -Indexes type
    -Replication Of leader- 
        -Single - write on one node, read from any. Ensures no write conflicts but costs low write throughput
        -multi - wrtie on a small subset of leader databases. Writes can from any databases. more write throughput at the cost of potential write conflicts
        -leaderless - writes go to all databases, reads come from all databases- more write throughput at the cost of potential write conflicts
    -SQL 
        -Relational/Normalized data - change to one table may require changes to another
            -e.g adding an author and their books to different tables and different nodes. May require two phase commit (expensive)
        -use when we need joins 
        -have transactional (ACID guarantees) 
            -excessively slow if you dont need them
        -use when correctness is more important than speed 
        -uses B-trees - better for reads than writes in theory
    
8. NOSql-
    -MongoDb
        -Document Data model
        -Data is written in large nested documents, better data locality(if you choose to organize your data in a way that takes advantage of this)- but denormalized
        -B trees and transactions supported
        -similar to sql but more flexibility with data model. prefer sql in interviews unless we dont know the structure and need flexibitlity
    -Cassandra
    - ring of nodes. consistent hashing. gossip protocol
        -Wide column data store, has a shard key and a sort key
            -Allows for flexible schemas, ease of partitioning
        -Leaderless replication (configurable)
            -Super fast writes, albeit uses last write wins for conflict resolution
            -May clobber existing writes if they were not the winner of LWW.
        -Index based off of LSM tree and SSTables. Fast Writes
        -Conclusion: Great for applications with high write volume, consitency is not as important, all writes 
             and reads go the same shard (no transactions)
    -Redis
        -Key Features:-
            -Key value stores implemented in memory (uses hashmap under the hood). in value can store maps, sets, list, strings etc. (have built in atomic data type)
            -use for cache
            -single leader replication with automatic fail over
    -Neo4j
        -graph db 
    -influxDB
        -time series db. useful for ingestion based on running stream time.
    -hbase
        -modelled same on google bigtable
        -column wide database but very different than cassandra.
        - cassandra is good for real time transactions processing db. super fast writes due to eventual consistency 
        -hbase is really good for running huge/batch streaming processes on. Also capable of fast reads and writes 
     
Handling eventual consistency:-
    -make same user read from same db if they made a write for lets say 10 mins
    -keep write time stamps common and see if they have the latest write 

Handling conflicting writes on replica:-
    -

SQL vs NOSql
    -NoSql are self contained. Hence no join. Suppose an author is stored for every book document and the author name changes. Will have to update everything. If it would have been sql. just update the author in author table and inner join
    -NoSql is easier to shard since everything is self contained. Sql bad in horizontal scaling due to read joins on different partitions, distributed transactions, two phase locking is very slow etc 

Fencing token:-
    -An increasing number to resolve the conflicts.

How to have strong consistency?
Solutions:-
    1. Read from leader always but this is not optimal due to the load
    2. Sync. Write to leader. Write to its replica with a sync ID. Now whenever we reading from any replica get the sync ID from the centralised log and should read only afterwards that sync id from the replica node.

Coordination service is opposite of gossip protocol

Cache:-
    -Very much similar to databases just they store data only in key,value pairs and in RAM.
    -They also follow Replication, partitioning, Coordination service for cluster management.
    -Cache can sit on any server depending upon the use case but usually we have a seperate cluster of nodes just for cache in a distributed manner.

CDN:- 
    -cache for static content placed at geographically near locations.
    -push based:- the CDN pushes data to the client like new york time front page every day to all the users in US is pushed from US CDN.
    -pull based:- a new video by disha patani will put it in CDN for india since everybody is requesting it. After sometime remove it and put something new trending

