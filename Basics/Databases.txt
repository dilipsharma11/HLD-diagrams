1. Indexes:-
    - creates an index file on a column keeps in sorted order log(n) time map to the actual entry. Indexes can be of various types - dense, sparse, geospatial. 
    Internally stored as B-tree. log(n). self balancing binary tree
    - disadvantage :- during writes has to create entry on index file as well.

2. Replica Set:-
    - Writes only on master node
    - Reads from any master or slave
    - strong consistency is handled by acquiring lock and sends success write only once its completed on both leader as well as from leader to replica.
    - eventual consistency can cause stale reads. Solution is make each user read from the same replica as before. (The data will be in correct order)
    - use write ahead log as centralised to keep track of all operations on each node

3. Multi leader replication
    - Each distributed database in a geographical region has its own leader.

4. Leader less replica Set (not ideal)
    - It has no leaders. All are same just nodes
    - Reads happens on all the nodes simultanously. If 3/5 nodes are successfully written response is returned.
    - During writes every new entry maintains a new version number. If a write fails on a node it tries to update it by seeing if theres an updated version in other nodes.
    - uses quorum to decide 

5. Partitioning
    - Make sure while partitioning that some nodes may not experience heavy load compare to the others. Even though the partition is even but load/queries also have to be even.
    - Key Range partitioning 
        - partitions are based on keys. keys are sorted in partitions to support range queries. partitions are made based on load on each partition.
    - index choice in partitioning
        - local indexes optimises the write speed
        - global indexes optimises the read speed

6. NoSQL follows BASE (Basic Availability, Stateful, Eventual consistency)
    - Key value (DynamoDB, Redis)
        -e.g. DynamoDB, Redis. Can query only on keys. very fast
    - document based
        - e.g. MongoDb .In document based you can query based on value also but you cant query based on value in key value db like dynamoDB
    - column based. For each key it has a list of column and values
    - graph based

7. When to choose which database?
    -Indexes type
    -Replication- 
        -Single - write on one node, read from any. Ensures no write conflicts but costs low write throughput
        -multi - wrtie on a small subset of leader databases. Writes can from any databases. more write throughput at the cost of potential write conflicts
        -leaderless - writes go to all databases, reads come from all databases- more write throughput at the cost of potential write conflicts
    -SQL 
        -Relational/Normalized data - change to one table may require changes to another
            -e.g adding an author and their books to different tables and different nodes. May require two phase commit (expensive)
        -use when we need joins 
        -have transactional (ACID guarantees) 
            -excessively slow if you dont need them
        -use when correctness is more important than speed 
        -uses B-trees - better for reads than writes in theory
    
8. NOSql-
    -MongoDb
        -Document Data model
        -Data is written in large nested documents, better data locality(if you choose to organize your data in a way that takes advantage of this)- but denormalized
        -B trees and transactions supported
        -similar to sql but more flexibility with data model. prefer sql in interviews unless we dont know the structure and need flexibitlity
    -Cassandra
        -Wide column data store, has a shard key and a sort key
            -Allows for flexible schemas, ease of partitioning
        -MultiLeader/Single leader/Leaderless replication (configurable)
            -Super fast writes, albeit uses last write wins for conflict resolution
            -May clobber existing writes if they were not the winner of LWW.
        -Index based off of LSM tree and SSTables. Fast Writes
        -Conclusion: Great for applications with high wrote volume, consitency is not as important, all writes 
             and reads go the same shard (no transactions)
    -Redis
        -Key Features:-
            -Key value stores implemented in memory (uses hashmap under the hood)
            -use for cache
    -Neo4j
        -graph db 
    -influxDB
        -time series db. useful for ingestion based on running stream time.
     